Index: Unidriva/src/main/java/edu/unidrive/controllers/HomeUniDriveController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package edu.unidrive.controllers;\r\n\r\nimport edu.unidrive.entities.Utilisateur;\r\nimport edu.unidrive.services.PostService;\r\nimport edu.unidrive.services.UserService;\r\nimport edu.unidrive.tools.JwtUtil;\r\nimport io.jsonwebtoken.Claims;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.scene.Node;\r\nimport javafx.scene.Parent;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Alert;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.image.Image;\r\nimport javafx.scene.image.ImageView;\r\nimport javafx.scene.input.MouseEvent;\r\nimport javafx.stage.Stage;\r\n\r\n\r\n\r\nimport java.io.IOException;\r\n\r\npublic class HomeUniDriveController {\r\n\r\n    @FXML\r\n    private Button Profile;\r\n\r\n    @FXML\r\n    private Label logoutbtn;\r\n\r\n    @FXML\r\n    private ImageView profileImage;\r\n\r\n    @FXML\r\n    private Button statisticsButton;\r\n\r\n\r\n    private String jwtToken;// Référence à l'ImageView pour afficher la photo de profil\r\n\r\n    @FXML\r\n    void Logout(MouseEvent event) {\r\n        try {\r\n            FXMLLoader loader = new FXMLLoader(getClass().getClassLoader().getResource(\"Login.fxml\"));\r\n            Parent root = loader.load();\r\n            Stage stage = (Stage) logoutbtn.getScene().getWindow();\r\n            Scene scene = new Scene(root);\r\n            stage.setScene(scene);\r\n            stage.show();\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n    }\r\n\r\n    private String currentUserEmail;\r\n\r\n    public void setCurrentUserEmail(String email) {\r\n        this.currentUserEmail = email;\r\n        System.out.println(\"Email of the logged in user: \" + currentUserEmail);\r\n    }\r\n\r\n    @FXML\r\n    void goprofile(ActionEvent event) {\r\n        try {\r\n            FXMLLoader loader = new FXMLLoader(getClass().getClassLoader().getResource(\"Profile.fxml\"));\r\n            Parent root = loader.load();\r\n\r\n            ProfileController profileController = loader.getController();\r\n            profileController.setCurrentUserEmail(currentUserEmail);\r\n\r\n            Stage stage = (Stage) Profile.getScene().getWindow();\r\n            Scene scene = new Scene(root);\r\n            stage.setScene(scene);\r\n            stage.show();\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n    public void setProfileImage(String imageUrl) {\r\n        if (imageUrl != null && !imageUrl.isEmpty()) {\r\n            Image image = new Image(imageUrl);\r\n            profileImage.setImage(image);\r\n        }\r\n    }\r\n\r\n\r\n    public void setJwtToken(String jwtToken) {\r\n        this.jwtToken = jwtToken;\r\n        checkAdminAccess(); // Vérifier le rôle de l'utilisateur après avoir défini le token\r\n    }\r\n\r\n\r\n\r\n    private boolean isAdmin(String token) {\r\n        try {\r\n            Claims claims = JwtUtil.validateToken(token);\r\n            String role = claims.get(\"role\", String.class);\r\n            return \"ADMIN\".equals(role);\r\n        } catch (Exception e) {\r\n            return false; // Le token est invalide ou a expiré\r\n        }\r\n    }\r\n\r\n    public void checkAdminAccess() {\r\n        if (jwtToken != null) {\r\n            boolean isAdmin = isAdmin(jwtToken);\r\n            statisticsButton.setVisible(isAdmin); // Afficher ou masquer le bouton en fonction du rôle\r\n        } else {\r\n            statisticsButton.setVisible(false); // Masquer le bouton si l'utilisateur n'est pas authentifié\r\n        }\r\n    }\r\n\r\n    @FXML\r\n    void goToStatistics(ActionEvent event) {\r\n        try {\r\n            FXMLLoader loader = new FXMLLoader(getClass().getClassLoader().getResource(\"Statistics.fxml\"));\r\n            Parent root = loader.load();\r\n            Stage stage = (Stage) ((Node) event.getSource()).getScene().getWindow();\r\n            stage.setScene(new Scene(root));\r\n            stage.show();\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n    private void showAlert(Alert.AlertType alertType, String title, String message) {\r\n        Alert alert = new Alert(alertType);\r\n        alert.setTitle(title);\r\n        alert.setHeaderText(null); // Pas de texte d'en-tête\r\n        alert.setContentText(message);\r\n        alert.showAndWait(); // Afficher la boîte de dialogue et attendre une réponse\r\n    }\r\n    @FXML\r\n    private Label btnforum;\r\n\r\n    private final PostService postService = new PostService();\r\n\r\n    @FXML\r\n    public void initialize() {\r\n        // Ajouter un gestionnaire d'événements pour le clic sur \"Forum\"\r\n        btnforum.setOnMouseClicked(this::forum);\r\n    }\r\n    private int getCurrentUserId() {\r\n        return 40;\r\n    }\r\n\r\n\r\n    @FXML\r\n    void forum(MouseEvent event){\r\n        int userId = getCurrentUserId(); // Récupérer l'ID de l'utilisateur connecté\r\n\r\n        if (!postService.hasUserInterests(userId)) {\r\n            // Rediriger l'utilisateur vers l'interface de saisie des centres d'intérêt\r\n            try {\r\n                FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource(\"/CentresInteret.fxml\"));\r\n                Parent root = fxmlLoader.load();\r\n                btnforum.getScene().setRoot(root);\r\n            } catch (IOException e) {\r\n                System.err.println(\"Erreur lors du chargement de l'interface de saisie des centres d'intérêt : \" + e.getMessage());\r\n            }\r\n        } else {\r\n            // Rediriger l'utilisateur vers l'interface principale des posts\r\n            try {\r\n                FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource(\"/HomePost.fxml\"));\r\n                Parent root = fxmlLoader.load();\r\n                btnforum.getScene().setRoot(root);\r\n            } catch (IOException e) {\r\n                System.err.println(\"Erreur lors du chargement de l'interface principale des posts : \" + e.getMessage());\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n    @FXML\r\n    void aide(MouseEvent event){\r\n        try {\r\n            FXMLLoader loader = new FXMLLoader(getClass().getClassLoader().getResource(\"CRUD.fxml\"));\r\n            Parent root = loader.load();\r\n            Stage stage = (Stage) logoutbtn.getScene().getWindow();\r\n            Scene scene = new Scene(root);\r\n            stage.setScene(scene);\r\n            stage.show();\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n    }\r\n    @FXML\r\n    void covoiturage(MouseEvent event){\r\n        try {\r\n            FXMLLoader loader = new FXMLLoader(getClass().getClassLoader().getResource(\"CreerTrajet.fxml\"));\r\n            Parent root = loader.load();\r\n            Stage stage = (Stage) logoutbtn.getScene().getWindow();\r\n            Scene scene = new Scene(root);\r\n            stage.setScene(scene);\r\n            stage.show();\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n    }\r\n    @FXML\r\n    void lost(MouseEvent event) {\r\n        try {\r\n            FXMLLoader loader = new FXMLLoader(getClass().getClassLoader().getResource(\"Recompense.fxml\"));\r\n            Parent root = loader.load();\r\n            Stage stage = (Stage) logoutbtn.getScene().getWindow();\r\n            Scene scene = new Scene(root);\r\n            stage.setScene(scene);\r\n            stage.show();\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n    }
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Unidriva/src/main/java/edu/unidrive/controllers/HomeUniDriveController.java b/Unidriva/src/main/java/edu/unidrive/controllers/HomeUniDriveController.java
--- a/Unidriva/src/main/java/edu/unidrive/controllers/HomeUniDriveController.java	(revision 7beda0f0a4507913360b53b94bd07596bae74f87)
+++ b/Unidriva/src/main/java/edu/unidrive/controllers/HomeUniDriveController.java	(date 1741074947095)
@@ -143,7 +143,7 @@
         btnforum.setOnMouseClicked(this::forum);
     }
     private int getCurrentUserId() {
-        return 40;
+        return 43;
     }
 
 
@@ -205,7 +205,7 @@
     @FXML
     void lost(MouseEvent event) {
         try {
-            FXMLLoader loader = new FXMLLoader(getClass().getClassLoader().getResource("Recompense.fxml"));
+            FXMLLoader loader = new FXMLLoader(getClass().getClassLoader().getResource("ObjetPerdu.fxml"));
             Parent root = loader.load();
             Stage stage = (Stage) logoutbtn.getScene().getWindow();
             Scene scene = new Scene(root);
@@ -215,4 +215,4 @@
             e.printStackTrace();
         }
     }
-    }
\ No newline at end of file
+}
\ No newline at end of file
Index: Unidriva/src/main/java/edu/unidrive/controllers/CentresInteretController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package edu.unidrive.controllers;\r\n\r\nimport edu.unidrive.entities.Utilisateur;\r\nimport edu.unidrive.services.PostService;\r\nimport edu.unidrive.services.UserService;\r\nimport edu.unidrive.tools.MyConnection;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.scene.Parent;\r\nimport javafx.scene.control.TextField;\r\n\r\nimport java.io.IOException;\r\nimport java.sql.Connection;\r\n\r\n\r\npublic class CentresInteretController {\r\n\r\n    @FXML\r\n    private TextField centresInteretField;\r\n\r\n    private final PostService postService = new PostService();\r\n\r\n    private Connection connection;\r\n\r\n\r\n    @FXML\r\n    void validerCentresInteret() {\r\n        String centresInteret = centresInteretField.getText().trim();\r\n        this.connection = MyConnection.getInstance().getCnx();\r\n        if (centresInteret.isEmpty()) {\r\n            // Afficher un message d'erreur si le champ est vide\r\n            System.out.println(\"Veuillez entrer au moins un centre d'intérêt.\");\r\n            return;\r\n        }\r\n\r\n        // Enregistrer les centres d'intérêt dans la base de données\r\n        int userId = getCurrentUserId(); // Récupérer l'ID de l'utilisateur connecté\r\n        postService.saveUserInterests(userId, centresInteret);\r\n\r\n        // Rediriger l'utilisateur vers l'interface principale\r\n        try {\r\n            FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource(\"/HomePost.fxml\"));\r\n            Parent root = fxmlLoader.load();\r\n            centresInteretField.getScene().setRoot(root);\r\n        } catch (IOException e) {\r\n            System.err.println(\"Erreur lors du chargement de l'interface principale : \" + e.getMessage());\r\n        }\r\n    }\r\n\r\n    private int getCurrentUserId() {\r\n        return 40;\r\n    }\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Unidriva/src/main/java/edu/unidrive/controllers/CentresInteretController.java b/Unidriva/src/main/java/edu/unidrive/controllers/CentresInteretController.java
--- a/Unidriva/src/main/java/edu/unidrive/controllers/CentresInteretController.java	(revision 7beda0f0a4507913360b53b94bd07596bae74f87)
+++ b/Unidriva/src/main/java/edu/unidrive/controllers/CentresInteretController.java	(date 1741074947094)
@@ -48,7 +48,7 @@
     }
 
     private int getCurrentUserId() {
-        return 40;
+        return 43;
     }
 
 
Index: Unidriva/src/main/java/edu/unidrive/controllers/HomePostControllers.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package edu.unidrive.controllers;\r\n\r\nimport edu.unidrive.entities.Interaction;\r\nimport edu.unidrive.entities.Post;\r\nimport edu.unidrive.entities.Utilisateur;\r\nimport edu.unidrive.services.InteractionService;\r\nimport edu.unidrive.services.PostService;\r\nimport edu.unidrive.services.UserService;\r\nimport javafx.collections.FXCollections;\r\nimport javafx.collections.ObservableList;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.scene.Node;\r\nimport javafx.scene.Parent;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Alert;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.control.ButtonType;\r\nimport javafx.scene.control.ListCell;\r\nimport javafx.scene.control.ListView;\r\nimport javafx.scene.layout.HBox;\r\nimport javafx.scene.layout.VBox;\r\nimport javafx.scene.text.Text;\r\nimport javafx.stage.Stage;\r\nimport javafx.util.Callback;\r\n\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.Optional;\r\nimport javafx.fxml.FXML;\r\nimport javafx.scene.control.ListView;\r\n\r\npublic class HomePostControllers {\r\n    @FXML\r\n    private ListView<Post> postListView;\r\n\r\n    private ObservableList<Post> postList = FXCollections.observableArrayList();\r\n\r\n    private final PostService postService = new PostService();\r\n\r\n\r\n    @FXML\r\n    public void initialize() {\r\n        // Vérifier si l'utilisateur a déjà des centres d'intérêt\r\n        int userId = getCurrentUserId(); // Récupérer l'ID de l'utilisateur connecté\r\n        if (!postService.hasUserInterests(userId)) {\r\n            // Rediriger l'utilisateur vers l'interface de saisie des centres d'intérêt\r\n            try {\r\n                FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource(\"/CentresInteret.fxml\"));\r\n                Parent root = fxmlLoader.load();\r\n                postListView.getScene().setRoot(root);\r\n            } catch (IOException e) {\r\n                System.err.println(\"Erreur lors du chargement de l'interface de saisie des centres d'intérêt : \" + e.getMessage());\r\n            }\r\n        } else {\r\n            // Charger la liste des posts\r\n            refreshPostList();\r\n        }\r\n\r\n        postListView.setCellFactory(new Callback<>() {\r\n            @Override\r\n            public ListCell<Post> call(ListView<Post> param) {\r\n                return new ListCell<>() {\r\n                    @Override\r\n                    protected void updateItem(Post post, boolean empty) {\r\n                        super.updateItem(post, empty);\r\n\r\n                        if (empty || post == null) {\r\n                            setText(null);\r\n                            setGraphic(null);\r\n                        } else {\r\n                            VBox container = new VBox(10);\r\n\r\n                            Text postText = new Text(post.getTitle() + \" : \" + post.getDescription());\r\n                            container.getChildren().add(postText);\r\n\r\n                            Button commentButton = new Button(\"Commenter\");\r\n                            commentButton.setOnAction(event -> {\r\n                                try {\r\n                                    FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource(\"/Ajoutercommentaire.fxml\"));\r\n                                    Parent root = fxmlLoader.load();\r\n\r\n                                    edu.unidrive.controllers.Ajoutercommentairecontrollers ajouterCommentaireControllers = fxmlLoader.getController();\r\n                                    ajouterCommentaireControllers.setPostId(post.getId());\r\n\r\n                                    postListView.getScene().setRoot(root);\r\n                                } catch (IOException e) {\r\n                                    System.err.println(\"Erreur lors du chargement de Ajoutercommentaire.fxml : \" + e.getMessage());\r\n                                }\r\n                            });\r\n                            container.getChildren().add(commentButton);\r\n\r\n                            List<Interaction> comments = postService.getCommentsByPostId(post.getId());\r\n                            for (Interaction comment : comments) {\r\n                                Text commentText = new Text(\"Commentaire : \" + comment.getContent());\r\n                                container.getChildren().add(commentText);\r\n\r\n                                HBox buttonContainer = new HBox(10);\r\n\r\n                                Button deleteCommentButton = new Button(\"Supprimer\");\r\n                                deleteCommentButton.setOnAction(event -> {\r\n                                    InteractionService interactionService = new InteractionService();\r\n                                    interactionService.removeEntity(comment);\r\n                                    refreshPostList();\r\n                                });\r\n\r\n                                Button updateCommentButton = new Button(\"Modifier\");\r\n                                updateCommentButton.setOnAction(event -> {\r\n                                    try {\r\n                                        FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource(\"/ModifierCommentaire.fxml\"));\r\n                                        Parent root = fxmlLoader.load();\r\n                                        ModifierCommentaireControllers modifierCommentaireControllers = fxmlLoader.getController();\r\n                                        modifierCommentaireControllers.setCommentToUpdate(comment);\r\n                                        modifierCommentaireControllers.setHomePostControllers(HomePostControllers.this);\r\n                                        postListView.getScene().setRoot(root);\r\n                                    } catch (IOException e) {\r\n                                        System.err.println(\"Erreur lors du chargement de ModifierCommentaire.fxml : \" + e.getMessage());\r\n                                    }\r\n                                });\r\n                                buttonContainer.getChildren().addAll(deleteCommentButton, updateCommentButton);\r\n                                container.getChildren().add(buttonContainer);\r\n                            }\r\n                            setGraphic(container);\r\n                        }\r\n                    }\r\n                };\r\n            }\r\n        });\r\n    }\r\n\r\n    @FXML\r\n    void createe(ActionEvent event) {\r\n        try {\r\n            FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource(\"/AjouterPost.fxml\"));\r\n            Parent root = fxmlLoader.load();\r\n            edu.unidrive.controllers.AjouterPostControllers ajouterPostControllers = fxmlLoader.getController();\r\n            ajouterPostControllers.setHomePostControllers(this);\r\n            postListView.getScene().setRoot(root);\r\n        } catch (IOException e) {\r\n            System.err.println(\"Erreur lors du chargement de AjouterPost.fxml : \" + e.getMessage());\r\n        }\r\n    }\r\n\r\n    @FXML\r\n    void updatee(ActionEvent event) {\r\n        Post selectedPost = postListView.getSelectionModel().getSelectedItem();\r\n        if (selectedPost == null) {\r\n            showAlert(\"Erreur\", \"Veuillez sélectionner un post à modifier.\");\r\n            return;\r\n        }\r\n        try {\r\n            FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource(\"/ModifierPost.fxml\"));\r\n            Parent root = fxmlLoader.load();\r\n            ModifierPostControllers modifierPostControllers = fxmlLoader.getController();\r\n            modifierPostControllers.setPostToUpdate(selectedPost);\r\n            modifierPostControllers.setHomePostControllers(this);\r\n            postListView.getScene().setRoot(root);\r\n        } catch (IOException e) {\r\n            System.err.println(\"Erreur lors du chargement de ModifierPost.fxml : \" + e.getMessage());\r\n        }\r\n    }\r\n\r\n    @FXML\r\n    void removee(ActionEvent event) {\r\n        Post selectedPost = postListView.getSelectionModel().getSelectedItem();\r\n        if (selectedPost == null) {\r\n            showAlert(\"Erreur\", \"Veuillez sélectionner un post à supprimer.\");\r\n            return;\r\n        }\r\n        Alert confirmation = new Alert(Alert.AlertType.CONFIRMATION);\r\n        confirmation.setTitle(\"Confirmation de suppression\");\r\n        confirmation.setHeaderText(\"Êtes-vous sûr de vouloir supprimer ce post ?\");\r\n        confirmation.setContentText(\"Cette action est irréversible.\");\r\n\r\n        Optional<ButtonType> result = confirmation.showAndWait();\r\n        if (result.isPresent() && result.get() == ButtonType.OK) {\r\n            postService.removeEntity(selectedPost);\r\n            refreshPostList();\r\n            showAlert(\"Succès\", \"Le post a été supprimé avec succès.\");\r\n        }\r\n    }\r\n\r\n    public void refreshPostList() {\r\n        postList.clear();\r\n        List<Post> posts = postService.getAllData();\r\n        postList.addAll(posts);\r\n        postListView.setItems(postList);\r\n    }\r\n\r\n    private void showAlert(String title, String message) {\r\n        Alert alert = new Alert(Alert.AlertType.INFORMATION);\r\n        alert.setTitle(title);\r\n        alert.setHeaderText(message);\r\n        alert.showAndWait();\r\n    }\r\n\r\n    private int getCurrentUserId() {\r\n\r\n        return 40;\r\n    }\r\n\r\n    @FXML\r\n    void goToBack(ActionEvent event) {\r\n        // Load the new FXML file\r\n        FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource(\"/HomeUniDrive.fxml\"));\r\n        try {\r\n            // Load the new page and set it as the root\r\n            Parent root = fxmlLoader.load();\r\n            // Set the new scene\r\n            Scene scene = new Scene(root);\r\n            Stage stage = (Stage) ((Node) event.getSource()).getScene().getWindow();\r\n            stage.setScene(scene);\r\n            stage.show();\r\n        } catch (IOException e) {\r\n            System.out.println(\"Erreur de navigation : \" + e.getMessage());\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Unidriva/src/main/java/edu/unidrive/controllers/HomePostControllers.java b/Unidriva/src/main/java/edu/unidrive/controllers/HomePostControllers.java
--- a/Unidriva/src/main/java/edu/unidrive/controllers/HomePostControllers.java	(revision 7beda0f0a4507913360b53b94bd07596bae74f87)
+++ b/Unidriva/src/main/java/edu/unidrive/controllers/HomePostControllers.java	(date 1741074947095)
@@ -197,7 +197,7 @@
 
     private int getCurrentUserId() {
 
-        return 40;
+        return 43;
     }
 
     @FXML
Index: Unidriva/src/main/java/edu/unidrive/services/UserService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package edu.unidrive.services;\r\n\r\nimport edu.unidrive.entities.Utilisateur;\r\nimport edu.unidrive.interfaces.Iservice;\r\nimport edu.unidrive.tools.MyConnection;\r\nimport java.sql.Connection;\r\nimport java.sql.PreparedStatement;\r\nimport java.sql.ResultSet;\r\nimport java.sql.SQLException;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport edu.unidrive.entities.Profile;\r\nimport org.mindrot.jbcrypt.BCrypt;\r\n\r\n\r\npublic class UserService implements Iservice<Utilisateur> {\r\n\r\n    private Connection connection;\r\n\r\n    public UserService() {\r\n        this.connection = MyConnection.getInstance().getCnx();\r\n    }\r\n\r\n    public Utilisateur getUserByEmail(String email) {\r\n        Utilisateur utilisateur = null;\r\n        String requete = \"SELECT u.*, p.id as profile_id, p.photo, p.bio, p.telephone, p.adresse \" +\r\n                \"FROM utilisateur u \" +\r\n                \"LEFT JOIN profile p ON u.id = p.utilisateur_id \" +\r\n                \"WHERE u.email = ?\";\r\n        try {\r\n            PreparedStatement pst = connection.prepareStatement(requete);\r\n            pst.setString(1, email);\r\n            ResultSet rs = pst.executeQuery();\r\n            if (rs.next()) {\r\n                utilisateur = new Utilisateur();\r\n                utilisateur.setId(rs.getInt(\"id\"));\r\n                utilisateur.setEmail(rs.getString(\"email\"));\r\n                utilisateur.setDob(rs.getString(\"dob\"));\r\n                utilisateur.setGender(rs.getString(\"gender\"));\r\n                utilisateur.setLastname(rs.getString(\"lastname\"));\r\n                utilisateur.setFirstname(rs.getString(\"firstname\"));\r\n                utilisateur.setPassword(rs.getString(\"password\"));\r\n                utilisateur.setRole(rs.getString(\"role\")); // Ajoutez cette ligne\r\n\r\n                Profile profile = new Profile();\r\n                profile.setId(rs.getInt(\"profile_id\"));\r\n                profile.setPhoto(rs.getString(\"photo\"));\r\n                profile.setBio(rs.getString(\"bio\"));\r\n                profile.setTelephone(rs.getString(\"telephone\"));\r\n                profile.setAdresse(rs.getString(\"adresse\"));\r\n\r\n                utilisateur.setProfile(profile);\r\n            }\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(\"Erreur lors de la récupération de l'utilisateur : \" + e.getMessage());\r\n        }\r\n        return utilisateur;\r\n    }\r\n    public int getUserIdByEmail(String email) {\r\n\r\n\r\n        Utilisateur user1 = getUserByEmail(email);\r\n        if (user1 != null) {\r\n            return user1.getId(); // Retourner l'ID de l'utilisateur\r\n        } else {\r\n            throw new RuntimeException(\"Utilisateur non trouvé avec l'email : \" + email);\r\n        }\r\n    }\r\n\r\n    public void add(Utilisateur utilisateur) {\r\n        String requete = \"INSERT INTO utilisateur (email, dob, gender, firstname, lastname, password, role) VALUES (?, ?, ?, ?, ?, ?, ?)\";\r\n        try (PreparedStatement pst = MyConnection.getInstance().getCnx().prepareStatement(requete, PreparedStatement.RETURN_GENERATED_KEYS)) {\r\n\r\n            pst.setString(1, utilisateur.getEmail());\r\n            pst.setString(2, utilisateur.getDob());\r\n            pst.setString(3, utilisateur.getGender());\r\n            pst.setString(4, utilisateur.getFirstname());\r\n            pst.setString(5, utilisateur.getLastname());\r\n            pst.setString(6, utilisateur.getPassword());\r\n            pst.setString(7, utilisateur.getRole());\r\n\r\n            pst.executeUpdate();\r\n\r\n            // Récupérer l'ID généré par la base de données\r\n            try (ResultSet generatedKeys = pst.getGeneratedKeys()) {\r\n                if (generatedKeys.next()) {\r\n                    utilisateur.setId(generatedKeys.getInt(1));\r\n\r\n                } else {\r\n                    throw new SQLException(\"Échec de la récupération de l'ID généré.\");\r\n                }\r\n            }\r\n            System.out.println(\"Utilisateur ajouté avec succès !\");\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(\"Erreur lors de l'ajout de l'utilisateur : \" + e.getMessage());\r\n        }\r\n    }\r\n\r\n\r\n    @Override\r\n    public void remove(Utilisateur entity) {\r\n        try {\r\n            String requete = \"DELETE FROM utilisateur WHERE id = ?\";\r\n            PreparedStatement pst = connection.prepareStatement(requete);\r\n            pst.setInt(1, entity.getId());\r\n\r\n            int rowsDeleted = pst.executeUpdate();\r\n            if (rowsDeleted > 0) {\r\n                System.out.println(\" Utilisateur supprimé avec succès !\");\r\n            } else {\r\n                System.out.println(\" Aucun utilisateur trouvé avec cet ID.\");\r\n            }\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(\" Erreur lors de la suppression de l'utilisateur : \" + e.getMessage());\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void update(Utilisateur entity) {\r\n        try {\r\n            String requete = \"UPDATE utilisateur SET email=?, dob=?, gender=?, lastname=?, firstname=?, password=? WHERE id=?\";\r\n            PreparedStatement pst = connection.prepareStatement(requete);\r\n            pst.setString(1, entity.getEmail());\r\n            pst.setString(2, entity.getDob());\r\n            pst.setString(3, entity.getGender());\r\n            pst.setString(4, entity.getLastname());\r\n            pst.setString(5, entity.getFirstname());\r\n            pst.setString(6, entity.getPassword());\r\n            pst.setInt(7, entity.getId());\r\n\r\n            int rowsUpdated = pst.executeUpdate();\r\n            if (rowsUpdated > 0) {\r\n                System.out.println(\"Utilisateur mis à jour avec succès !\");\r\n            } else {\r\n                System.out.println(\" Aucun utilisateur trouvé avec cet ID.\");\r\n            }\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(\" Erreur lors de la mise à jour de l'utilisateur : \" + e.getMessage());\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public List<Utilisateur> getAllData() {\r\n        List<Utilisateur> utilisateurs = new ArrayList<>();\r\n        try {\r\n            String requete = \"SELECT * FROM utilisateur\";\r\n            PreparedStatement pst = connection.prepareStatement(requete);\r\n            ResultSet rs = pst.executeQuery();\r\n\r\n            while (rs.next()) {\r\n                Utilisateur user = new Utilisateur(\r\n                        rs.getInt(\"id\"),\r\n                        rs.getString(\"email\"),\r\n                        rs.getString(\"dob\"),\r\n                        rs.getString(\"gender\"),\r\n                        rs.getString(\"lastname\"),\r\n                        rs.getString(\"firstname\"),\r\n                        rs.getString(\"password\"),\r\n                        rs.getString(\"role\")\r\n                );\r\n                utilisateurs.add(user);\r\n            }\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(\" Erreur lors de la récupération des utilisateurs : \" + e.getMessage());\r\n        }\r\n        return utilisateurs;\r\n    }\r\n\r\n    @Override\r\n    public void removeEntity(Utilisateur entity) {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void updateEntity(Utilisateur entity) {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void addEntity(Utilisateur utilisateur) {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void deleteEntity(int id, Utilisateur utilisateur) {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void updateEntity(int id, Utilisateur utilisateur) {\r\n\r\n    }\r\n\r\n    @Override\r\n    public List<Utilisateur> getallData() {\r\n        return List.of();\r\n    }\r\n\r\n    @Override\r\n    public Utilisateur getEntity(int id) {\r\n        return null;\r\n    }\r\n\r\n    @Override\r\n    public void deleteEntity(Utilisateur utilisateur) {\r\n\r\n    }\r\n\r\n    public boolean loginUser(String email, String password) {\r\n        try {\r\n            String requete = \"SELECT password FROM utilisateur WHERE email = ?\";\r\n            PreparedStatement pst = connection.prepareStatement(requete);\r\n            pst.setString(1, email);\r\n\r\n            ResultSet rs = pst.executeQuery();\r\n            if (rs.next()) {\r\n                String hashedPassword = rs.getString(\"password\");\r\n                return BCrypt.checkpw(password, hashedPassword); // Vérifie le mot de passe haché\r\n            } else {\r\n                System.out.println(\"Nom d'utilisateur ou mot de passe incorrect !\");\r\n                return false;\r\n            }\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(\"Erreur lors de la connexion : \" + e.getMessage());\r\n        }\r\n    }\r\n\r\n    public boolean isEmailUnique(String email) {\r\n        String query = \"SELECT COUNT(*) FROM utilisateur WHERE email = ?\";\r\n        try {\r\n            PreparedStatement pst = connection.prepareStatement(query);\r\n            pst.setString(1, email);\r\n            ResultSet rs = pst.executeQuery();\r\n            if (rs.next()) {\r\n                return rs.getInt(1) == 0;\r\n            }\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(\"Erreur lors de la vérification de l'unicité de l'email : \" + e.getMessage());\r\n        }\r\n        return false;\r\n    }\r\n    public String getHashedPasswordByEmail(String email) {\r\n        String query = \"SELECT password FROM utilisateur WHERE email = ?\";\r\n\r\n        try (\r\n                PreparedStatement statement = connection.prepareStatement(query)) {\r\n\r\n            statement.setString(1, email);\r\n            ResultSet resultSet = statement.executeQuery();\r\n\r\n            if (resultSet.next()) {\r\n                return resultSet.getString(\"password\");\r\n            }\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        return null;\r\n    }\r\n    public int getTotalUsers() {\r\n        String query = \"SELECT COUNT(*) FROM utilisateur\";\r\n        try (PreparedStatement pst = connection.prepareStatement(query)) {\r\n            ResultSet rs = pst.executeQuery();\r\n            if (rs.next()) {\r\n                return rs.getInt(1);\r\n            }\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    public int getAdminUsers() {\r\n        String query = \"SELECT COUNT(*) FROM utilisateur WHERE role = 'ADMIN'\";\r\n        try (PreparedStatement pst = connection.prepareStatement(query)) {\r\n            ResultSet rs = pst.executeQuery();\r\n            if (rs.next()) {\r\n                return rs.getInt(1);\r\n            }\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return 0;\r\n    }\r\n\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Unidriva/src/main/java/edu/unidrive/services/UserService.java b/Unidriva/src/main/java/edu/unidrive/services/UserService.java
--- a/Unidriva/src/main/java/edu/unidrive/services/UserService.java	(revision 7beda0f0a4507913360b53b94bd07596bae74f87)
+++ b/Unidriva/src/main/java/edu/unidrive/services/UserService.java	(date 1741074947095)
@@ -285,4 +285,4 @@
 
 
 
-}
+}
\ No newline at end of file
